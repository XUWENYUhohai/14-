#include "DBoW3/DBoW3.h"
#include <opencv2/opencv.hpp>
#include <iostream>
#include <vector>
#include <string>

using namespace std;
/***************************************************
 * 本节演示了如何根据前面训练的字典计算相似性评分
 * ************************************************/
int main(int argc, char *argv[])
{
    // read the images and database 
    cout << "reading database" << endl;
    // DBoW3::Vocabulary vocab("./ch11/vocabulary.yml.gz");
    DBoW3::Vocabulary vocab("./ch11/vocab_larger.yml.gz");  // use large vocab if you want: 
    if(vocab.empty())
    {
        cerr << "Vocabulary does not exist." << endl;
        return 1;
    }
    cout << "reading images... " << endl;
    vector<cv::Mat> images;
    for (size_t i = 0; i < 10; i++)
    {
        string path = "./ch11/data/" + to_string(i+1) + ".png";
        images.push_back(cv::imread(path));
    }
    
    // NOTE: in this case we are comparing images with a vocabulary generated by themselves, this may lead to overfit.
    // detect ORB features
    cout << "detecting ORB features ... " << endl;
    cv::Ptr<cv::Feature2D> detector = cv::ORB::create();
    vector<cv::Mat> descriptors;
    for (cv::Mat &image : images)
    {
        vector<cv::KeyPoint> keypoints;
        cv::Mat descriptor;
        detector->detectAndCompute(image,cv::Mat(),keypoints,descriptor);
        descriptors.push_back(descriptor);
    }

    cout << "descriptor 0 size: "<<descriptors[0].size() << endl;//应该是32行500列，500个特征点，每个元素8位，256维描述子
    
    // we can compare the images directly or we can compare one image to a database 
    // images :
    cout << "comparing images with images " << endl;
    for (size_t i = 0; i < images.size(); i++)
    {
        DBoW3::BowVector v1;//定义词袋描述向量(直方图向量)
        vocab.transform(descriptors[i],v1);
        //descriptors[i]表示图像i中所有的ORB描述子集合，函数transform()计算出用先前字典来描述的单词向量，每个向量中元素的值要么是0，表示图像i中没有这个单词；要么是该单词的权重
        //BoW描述向量中含有每个单词的ID和权重，两者构成了整个稀疏的向量

        cout<< "transform image into BoW vector:\nsize = " << v1.size() <<endl;//每个图含有单词数量
        cout<< "key value pair = \n" << v1 <<endl;//具体的词袋描述向量（ID+权重）

        for (int j = i;j < images.size();j++)
        {
            DBoW3::BowVector v2;
            vocab.transform(descriptors[j],v2);
            double score = vocab.score(v1,v2);
            cout << "image " << i << " vs image " << j << " : " << score << endl;
        }
        cout << endl;
    }
    
    // or with database
    // 使用数据库查询时，DBoW对上面的分数进行排序，给出最相似的结果
    cout << "comparing images with database " << endl;
    DBoW3::Database db(vocab,false,0);//声明一个BoW数据库对象，用视觉字典初始化
    for (size_t i = 0; i < descriptors.size(); i++)
    {
        db.add(descriptors[i]);// 将10幅图像的ORB描述子向量存入数据库
    }
    cout << "database info: " << db << endl;

    for (size_t i = 0; i < descriptors.size(); i++)
    {
        DBoW3::QueryResults ret;// (query)查询结果
        db.query(descriptors[i],ret,4);// max result=4// 只取最相似的前4个结果
        cout << "searching for image " << i << " returns " << ret << endl << endl;
    }
    cout << "done." << endl;
    return 0;
}
